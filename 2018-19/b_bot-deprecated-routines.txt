//DL 2/3/19
//DL  Put the time-based navigation routines in here.   The current routines rely on encoders and gryo.


/**

void turnLeftByTime(int power, int duration)
{

		motor[frontRight] = power;
		motor[midRight] = power;
		motor[rearRight] = power;
		motor[frontLeft] = -1*power;
		motor[midLeft] = -1*power;
		motor[rearLeft] = -1*power;



		sleep(duration);
}

void turnRightByTime(int power, int duration)
{
		motor[frontRight] = -1*power;
		motor[midRight] = -1*power;
		motor[rearRight] = -1*power;
		motor[frontLeft] = power;
		motor[midLeft] = power;
		motor[rearLeft] = power;
				sleep(duration);
}


void goForwardByTime(int power, int duration)
{

		motor[frontRight] = power;
		motor[midRight] = power;
		motor[rearRight] = power;
		motor[frontLeft] = power;
		motor[midLeft] = power;
		motor[rearLeft] = power;


		//sleep is in msec
		sleep(duration);

}





void goBackByTime(int power, int duration)
{

		motor[frontRight] = -1*power;
		motor[midRight] = -1*power;
		motor[rearRight] = -1*power;
		motor[frontLeft] = -1*power;
		motor[midLeft] = -1*power;
		motor[rearLeft] = -1*power;



		sleep(duration);
}

**/




void goForwardDistance(int clicks)
{
	int power;
	power=defaultMotorSpeed;
			writeDebugStreamLine("starting goForwardDistance");
//	writeDebugStreamLine("enc left:%d",SensorValue[leftEncoder]);
//  writeDebugStreamLine("enc left:%d",clicks);


			SensorValue[leftEncoder]=0;



	while	(SensorValue[leftEncoder]<clicks)
	{
			//go forward for 1/10 second
		motor[frontRight] = power;
		motor[midRight] = power;
		motor[rearRight] = power;
		motor[frontLeft] = power;
		motor[midLeft] = power;
		motor[rearLeft] = power;
		sleep(100);

		}
			writeDebugStreamLine("ending goForwardDistance");
}


void goBackDistance(int clicks)
{
	int power;
	power=defaultMotorSpeed;
	writeDebugStreamLine("starting goBackDistance");
	SensorValue[leftEncoder]=0;
	while	(SensorValue[leftEncoder]>=-1*clicks)
	{
			//go back for 1/10 second
		motor[frontRight] = -1*power;
		motor[midRight] = -1*power;
task autonomous_Red_A()
{
//for competition - flipping caps


//goal is to turn flip CAPS and land on platform
//STEPS
//start facing backwares
//turn on flipper
//drive backwars 4 ft
//hopefully will knock ball from 1st cap
//go forward 2 feet
//turn 90 degrees left
//go back 2 feet and hit the 2nd cap
//turn 180 degrees
//start heading for platform


//place on the spots near the flags
writeDebugStreamLine("starting autonomous_A");
//turnLeftByDegrees(270);




motor[capFlip] = -126;
//goBackDistance(2050);
goBackInches(41);
//this should have grabbed ball from 1st cap
stopMotor();
motor[capFlip] = 0;
turnLeftByDegrees(70);
stopMotor();
SensorValue[leftEncoder]=0;
//turnRight(60,880);
// ---  turnLeft(60,700);
motor[capFlip] = 126;
//goBackDistance(1150);
goBackInches(23);
stopMotor();
motor[capFlip] = 0;
//this shd have flipped 2nd cap


//now start heading for the platform
//goForwardDistance(1150);
goForwardInches(23);
turnRightByDegrees(90);
goForwardDistance(2050);
turnLeftByDegrees(90);
//then go fwd short distance
motor[capFlip] = 126;
goForwardDistance(1300);
motor[capFlip] = 0;
//then turn left
turnRightByDegrees(90);
//then go fwd longer distance
//goBackDistance(2050);
goForwardDistance(41);
sleep(1000);
//shd now be on the platform




stopMotor();
}


**/
		motor[rearRight] = -1*power;
		motor[frontLeft] = -1*power;
		motor[midLeft] = -1*power;
		motor[rearLeft] = -1*power;
		sleep(100);

		}
		writeDebugStreamLine("ending goBackDistance");

}




